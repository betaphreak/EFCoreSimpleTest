//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 612
using System;
using System.Linq;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Acme.TestProject.EFDAL.Entity;
using System.Data.SqlClient;
using System.Configuration;
using Microsoft.EntityFrameworkCore.ChangeTracking;

namespace Acme.TestProject.EFDAL
{
	#region EntityMappingConstants Enumeration

	/// <summary>
	/// A map for all entity types in this library
	/// </summary>
	public enum EntityMappingConstants
	{
		/// <summary>
		/// A mapping for the the Customer entity
		/// </summary>
		Customer,
		/// <summary>
		/// A mapping for the the Order entity
		/// </summary>
		Order,
	}

	#endregion

	#region Entity Context

	/// <summary>
	/// The entity context for the defined model schema
	/// </summary>
	public partial class TestProjectEntities : Microsoft.EntityFrameworkCore.DbContext, Acme.TestProject.EFDAL.ITestProjectEntities, IContext
	{
		/// <summary />
		public static Action<string> QueryLogger { get; set; }

		/// <summary>
		/// A unique key for this object instance
		/// </summary>
		public Guid InstanceKey { get; private set; }

		/// <summary>
		/// The audit modifier used to mark database edits
		/// </summary>
		protected ContextStartup _contextStartup = new ContextStartup(null);

		private static object _seqCacheLock = new object();

		private const string _version = "0.0.0.0.3";
		private const string _modelKey = "7413288b-2c2b-4276-a4bb-7a8fc35d767e";
		protected string _connectionString = null;

		/// <summary />
		public event EventHandler<Acme.TestProject.EFDAL.EventArguments.EntityListEventArgs> BeforeSaveModifiedEntity;
		/// <summary />
		protected virtual void OnBeforeSaveModifiedEntity(Acme.TestProject.EFDAL.EventArguments.EntityListEventArgs e)
		{
			if(this.BeforeSaveModifiedEntity != null)
			{
				this.BeforeSaveModifiedEntity(this, e);
			}
		}

		/// <summary />
		public event EventHandler<Acme.TestProject.EFDAL.EventArguments.EntityListEventArgs> BeforeSaveAddedEntity;
		/// <summary />
		protected virtual void OnBeforeSaveAddedEntity(Acme.TestProject.EFDAL.EventArguments.EntityListEventArgs e)
		{
			if(this.BeforeSaveAddedEntity != null)
			{
				this.BeforeSaveAddedEntity(this, e);
			}
		}

		/// <summary />
		public event EventHandler<Acme.TestProject.EFDAL.EventArguments.EntityListEventArgs> AfterSaveModifiedEntity;
		/// <summary />
		protected virtual void OnAfterSaveModifiedEntity(Acme.TestProject.EFDAL.EventArguments.EntityListEventArgs e)
		{
			if(this.AfterSaveModifiedEntity != null)
			{
				this.AfterSaveModifiedEntity(this, e);
			}
		}

		/// <summary />
		public event EventHandler<Acme.TestProject.EFDAL.EventArguments.EntityListEventArgs> AfterSaveAddedEntity;
		/// <summary />
		protected virtual void OnAfterSaveAddedEntity(Acme.TestProject.EFDAL.EventArguments.EntityListEventArgs e)
		{
			if(this.AfterSaveAddedEntity != null)
			{
				this.AfterSaveAddedEntity(this, e);
			}
		}

		#region Constructors

		/// <summary>
	/// Initializes a new TestProjectEntities object using the connection string found in the 'TestProjectEntities' section of the application configuration file.
		/// </summary>
		public TestProjectEntities() :
			base()
		{
			_connectionString = ConfigurationManager.ConnectionStrings["TestProjectEntities"]?.ConnectionString;
			InstanceKey = Guid.NewGuid();
			_contextStartup = new ContextStartup(null, true);
			this.CommandTimeout = _contextStartup.CommandTimeout;
			this.OnContextCreated();
		}

		/// <summary>
	/// Initialize a new TestProjectEntities object with an audit modifier.
		/// </summary>
		public TestProjectEntities(ContextStartup contextStartup) :
				base()
		{
			_connectionString = ConfigurationManager.ConnectionStrings["TestProjectEntities"]?.ConnectionString;
			InstanceKey = Guid.NewGuid();
			_contextStartup = contextStartup;
			this.CommandTimeout = _contextStartup.CommandTimeout;
			this.OnContextCreated();
		}

		/// <summary>
	/// Initialize a new TestProjectEntities object with an audit modifier.
		/// </summary>
		public TestProjectEntities(ContextStartup contextStartup, string connectionString) :
				base()
		{
			_connectionString = connectionString;
			InstanceKey = Guid.NewGuid();
			_contextStartup = contextStartup;
			this.CommandTimeout = _contextStartup.CommandTimeout;
			this.OnContextCreated();
		}

		/// <summary>
	/// Initialize a new TestProjectEntities object with an audit modifier.
		/// </summary>
		public TestProjectEntities(string connectionString) :
				base()
		{
			_connectionString = connectionString;
			InstanceKey = Guid.NewGuid();
			_contextStartup = new ContextStartup(null, true);
			this.CommandTimeout = _contextStartup.CommandTimeout;
			this.OnContextCreated();
		}

		#endregion

		partial void OnContextCreated();
		partial void OnBeforeSaveChanges(ref bool cancel);
		partial void OnAfterSaveChanges();
		partial void OnModelCreated(ModelBuilder modelBuilder);

		/// <summary>
		/// Model creation event
		/// </summary>
		protected override void OnModelCreating(ModelBuilder modelBuilder)
		{
			base.OnModelCreating(modelBuilder);

			#region Map Tables
			modelBuilder.Entity<Acme.TestProject.EFDAL.Entity.Customer>().ToTable("Customer");
			modelBuilder.Entity<Acme.TestProject.EFDAL.Entity.Order>().ToTable("Order");
			#endregion

			#region Setup Fields

			//Field setup for Customer entity
			modelBuilder.Entity<Acme.TestProject.EFDAL.Entity.Customer>().Property(d => d.CustomerId).IsRequired(true).ValueGeneratedOnAdd();
			modelBuilder.Entity<Acme.TestProject.EFDAL.Entity.Customer>().Property(d => d.FirstName).IsRequired(true).HasMaxLength(50);
			modelBuilder.Entity<Acme.TestProject.EFDAL.Entity.Customer>().Property(d => d.LastName).IsRequired(true).HasMaxLength(50);
			modelBuilder.Entity<Acme.TestProject.EFDAL.Entity.Customer>().Property(d => d.CreatedDate).IsRequired();
			modelBuilder.Entity<Acme.TestProject.EFDAL.Entity.Customer>().Property(d => d.ModifiedDate).IsRequired();
			modelBuilder.Entity<Acme.TestProject.EFDAL.Entity.Customer>().Property(d => d.Timestamp).HasMaxLength(8).IsRowVersion();

			//Field setup for Order entity
			modelBuilder.Entity<Acme.TestProject.EFDAL.Entity.Order>().Property(d => d.CustomerId).IsRequired(true);
			modelBuilder.Entity<Acme.TestProject.EFDAL.Entity.Order>().Property(d => d.OrderId).IsRequired(true).ValueGeneratedOnAdd();
			modelBuilder.Entity<Acme.TestProject.EFDAL.Entity.Order>().Property(d => d.Price).IsRequired(true);
			modelBuilder.Entity<Acme.TestProject.EFDAL.Entity.Order>().Property(d => d.CreatedDate).IsRequired();
			modelBuilder.Entity<Acme.TestProject.EFDAL.Entity.Order>().Property(d => d.ModifiedDate).IsRequired();
			modelBuilder.Entity<Acme.TestProject.EFDAL.Entity.Order>().Property(d => d.Timestamp).HasMaxLength(8).IsRowVersion();

			#endregion

			#region Ignore Enum Properties


			#endregion

			#region Primary Keys

			modelBuilder.Entity<Acme.TestProject.EFDAL.Entity.Customer>().HasKey(x => new { x.CustomerId });
			modelBuilder.Entity<Acme.TestProject.EFDAL.Entity.Order>().HasKey(x => new { x.OrderId });

			#endregion

			#region Relations

			//Relation [Customer] -> [Order] (Multiplicity 1:N)
			modelBuilder.Entity<Acme.TestProject.EFDAL.Entity.Order>()
							.HasOne(a => a.Customer)
							.WithMany(b => b.OrderList)
							.IsRequired(true)
							.HasPrincipalKey(q => new { q.CustomerId })
							.HasForeignKey(u => new { u.CustomerId })
							.HasConstraintName("FK__ORDER_CUSTOMER")
							.OnDelete(DeleteBehavior.Restrict);

			#endregion

			#region Stored Procedures


			#endregion

			// Override this event in the partial class to add any custom model changes or validation
			this.OnModelCreated(modelBuilder);

		}

		/// <summary>
		/// Persists all updates to the data source and resets change tracking in the object context.
		/// </summary>
		/// <returns>The number of objects in an System.Data.Entity.EntityState.Added, System.Data.Entity.EntityState.Modified, or System.Data.Entity.EntityState.Deleted state when System.Data.Objects.ObjectContext.SaveChanges() was called.</returns>
		public override int SaveChanges()
		{
			var cancel = false;
			OnBeforeSaveChanges(ref cancel);
			if (cancel) return 0;

			var markedTime = System.DateTime.Now;

			//Get the added list
			var addedList = this.ChangeTracker.Entries().Where(x => x.State == EntityState.Added);
			//Process added list
			foreach (var item in addedList)
			{
				var entity = item.Entity as IAuditable;
				if (entity != null)
				{
					var audit = entity as IAuditableSet;
					if (entity.IsModifyAuditImplemented && entity.ModifiedBy != this.ContextStartup.Modifier)
					{
						if (audit != null) audit.CreatedBy = this.ContextStartup.Modifier;
						if (audit != null) audit.ModifiedBy = this.ContextStartup.Modifier;
					}
					audit.CreatedDate = markedTime;
					audit.ModifiedDate = markedTime;
				}
			}
			this.OnBeforeSaveAddedEntity(new EventArguments.EntityListEventArgs { List = addedList });

			//Process modified list
			var modifiedList = this.ChangeTracker.Entries().Where(x => x.State == EntityState.Modified);
			foreach (var item in modifiedList)
			{
				var entity = item.Entity as IAuditable;
				if (entity != null)
				{
					var audit = entity as IAuditableSet;
					if (entity.IsModifyAuditImplemented && entity.ModifiedBy != this.ContextStartup.Modifier)
					{
						if (audit != null) audit.ModifiedBy = this.ContextStartup.Modifier;
					}
					audit.ModifiedDate = markedTime;
				}
			}
			this.OnBeforeSaveModifiedEntity(new EventArguments.EntityListEventArgs { List = modifiedList });

			var retval = 0;
			Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction customTrans = null;
			try
			{
				_paramList.Clear();
				if (base.Database.CurrentTransaction == null)
					customTrans = base.Database.BeginTransaction();
				retval += base.SaveChanges();
				if (customTrans != null)
					customTrans.Commit();
			}
			catch
			{
				throw;
			}
			finally
			{
				if (customTrans != null)
					customTrans.Dispose();
			}
			this.OnAfterSaveAddedEntity(new EventArguments.EntityListEventArgs { List = addedList });
			this.OnAfterSaveModifiedEntity(new EventArguments.EntityListEventArgs { List = modifiedList });
			OnAfterSaveChanges();
			return retval;
		}

		#region Entity Sets

		/// <summary>
		/// Entity set for Customer
		/// </summary>
		public virtual DbSet<Acme.TestProject.EFDAL.Entity.Customer> Customer { get; set; }

		/// <summary>
		/// Entity set for Order
		/// </summary>
		public virtual DbSet<Acme.TestProject.EFDAL.Entity.Order> Order { get; set; }

		#endregion

		/// <summary>
		/// The global settings of this context
		/// </summary>
		public virtual ContextStartup ContextStartup
		{
			get { return _contextStartup; }
		}

		/// <summary>
		/// Determines the version of the model that created this library.
		/// </summary>
		public virtual string Version
		{
			get { return _version; }
		}

		/// <summary>
		/// Determines the key of the model that created this library.
		/// </summary>
		public virtual string ModelKey
		{
			get { return _modelKey; }
		}

		#region AddItem Methods

        public override EntityEntry Add( object entity)
        {
            //No model validation. You should use the AddItem method.
            return base.Add(entity);
        }

        public override EntityEntry<TEntity> Add<TEntity>( TEntity entity)
        {
            //No model validation. You should use the AddItem method.
            return base.Add(entity);
        }

        public override void AddRange(IEnumerable<object> entities)
        {
            if (entities == null) return;
            //This will enforce model validation.
            foreach (var item in entities)
            {
                var entity = item as IBusinessObject;
                if (entity == null)
                    throw new Exception("Unknown entity type");
                this.AddItem(entity);
            }
        }

        public override void AddRange(params object[] entities)
        {
            this.AddRange(entities?.AsEnumerable());
        }

        public virtual void AddRange(IEnumerable<IBusinessObject> entities)
        {
            this.AddRange(entities?.AsEnumerable<object>());
        }

		/// <summary>
		/// Adds an entity of to the object context
		/// </summary>
		/// <param name="entity">The entity to add</param>
		public virtual Acme.TestProject.EFDAL.IBusinessObject AddItem(Acme.TestProject.EFDAL.IBusinessObject entity)
		{
			if (entity == null) throw new NullReferenceException();
			var audit = entity as Acme.TestProject.EFDAL.IAuditableSet;
			if (audit != null)
			{
				audit.CreatedBy = _contextStartup.Modifier;
				audit.ModifiedBy = _contextStartup.Modifier;
			}
			if (false) { }
			else if (entity is Acme.TestProject.EFDAL.Entity.Customer)
			{
				this.Add(entity);
			}
			else if (entity is Acme.TestProject.EFDAL.Entity.Order)
			{
				this.Add(entity);
			}
			else
			{
				//If not an entity then throw exception
				throw new Exception("Unknown entity type");
			}
			return entity;
		}

		#endregion

		#region RemoveItem Methods

        public override EntityEntry Remove( object entity)
        {
            //No model validation. You should use the RemoveItem method.
            return base.Remove(entity);
        }

        public override EntityEntry<TEntity> Remove<TEntity>( TEntity entity)
        {
            //No model validation. You should use the RemoveItem method.
            return base.Remove(entity);
        }

        public override void RemoveRange(IEnumerable<object> entities)
        {
            if (entities == null) return;
            foreach (var item in entities)
            {
                var entity = item as IBusinessObject;
                if (entity == null)
                    throw new Exception("Unknown entity type");
                this.RemoveItem(entity);
            }
        }

        public override void RemoveRange(params object[] entities)
        {
            this.RemoveRange(entities?.AsEnumerable());
        }

        public virtual void RemoveRange(IEnumerable<IBusinessObject> entities)
        {
            this.RemoveRange(entities?.AsEnumerable<object>());
        }

		/// <summary>
		/// Deletes an entity from the context
		/// </summary>
		/// <param name="entity">The entity to delete</param>
		public virtual void RemoveItem(IBusinessObject entity)
		{
			if (entity == null) return;
			else this.Remove(entity);
		}

		#endregion

		#region Connection String

		/// <summary>
		/// Returns the connection string used for this context object
		/// </summary>
		public string ConnectionString
		{
			get
			{
				try
				{
					if (this.Database.GetDbConnection() != null && !string.IsNullOrEmpty(this.Database.GetDbConnection().ConnectionString))
					{
						return Util.StripEFCS2Normal(this.Database.GetDbConnection().ConnectionString);
					}
					else
					{
						return null;
					}
				}
				catch (Exception)
				{
					return null;
				}
			}
		}

		#endregion

		#region ITestProject Members

		/// <summary />
		IQueryable<Acme.TestProject.EFDAL.Entity.Customer> Acme.TestProject.EFDAL.ITestProjectEntities.Customer
		{
			get { return this.Customer.AsQueryable(); }
		}

		/// <summary />
		IQueryable<Acme.TestProject.EFDAL.Entity.Order> Acme.TestProject.EFDAL.ITestProjectEntities.Order
		{
			get { return this.Order.AsQueryable(); }
		}

		/// <summary />
		protected List<string> _paramList = new List<string>();
		#endregion

		#region IContext Interface

		Enum IContext.GetEntityFromField(Enum field)
		{
			return GetEntityFromField(field);
		}

		object IContext.GetMetaData(Enum entity)
		{
			return GetMetaData((EntityMappingConstants)entity);
		}

		System.Type IContext.GetFieldType(Enum field)
		{
			return this.GetFieldType(field);
		}

		#endregion

		#region GetEntityFromField

		/// <summary>
		/// Determines the entity from one of its fields
		/// </summary>
		public static EntityMappingConstants GetEntityFromField(Enum field)
		{
			if (field is Acme.TestProject.EFDAL.Entity.Customer.FieldNameConstants) return Acme.TestProject.EFDAL.EntityMappingConstants.Customer;
			if (field is Acme.TestProject.EFDAL.Entity.Order.FieldNameConstants) return Acme.TestProject.EFDAL.EntityMappingConstants.Order;
			throw new Exception("Unknown field type!");
		}

		#endregion

		#region GetMetaData

		/// <summary>
		/// Gets the meta data object for an entity
		/// </summary>
		public static Acme.TestProject.EFDAL.IMetadata GetMetaData(Acme.TestProject.EFDAL.EntityMappingConstants table)
		{
			switch (table)
			{
				case Acme.TestProject.EFDAL.EntityMappingConstants.Customer: return new Acme.TestProject.EFDAL.Entity.Metadata.CustomerMetadata();
				case Acme.TestProject.EFDAL.EntityMappingConstants.Order: return new Acme.TestProject.EFDAL.Entity.Metadata.OrderMetadata();
			}
			throw new Exception("Entity not found!");
		}

		/// <summary />
		public static string GetTableName(Acme.TestProject.EFDAL.EntityMappingConstants entity)
		{
			var item = GetMetaData(entity);
			if (item == null) return null;
			return item.GetTableName();
		}
		#endregion

		#region Interface Extras

		/// <summary>
		/// Reloads the context object from database
		/// </summary>
		public void ReloadItem(BaseEntity entity)
		{
			this.Entry(entity).Reload();
		}

		#endregion

		#region ObjectContext

		/// <summary>
		/// Determines the timeout of the database connection
		/// </summary>
		public int? CommandTimeout
		{
			get { return this.Database.GetCommandTimeout(); }
			set { this.Database.SetCommandTimeout(value); }
		}

		#endregion

	}
	#endregion

}

namespace Acme.TestProject.EFDAL.Entity
{
}
#pragma warning restore 612

